// ==UserScript==
// @name     Rankk_blackjack
// @include  https://www.rankk.org/challenges/blackjack.py
// @version  1
// @author   Xavier Prunck
// @grant    GM.getValue
// @grant    GM.setValue
// @grant 	 GM.deleteValue
// @grant 	 GM.openInTab
// @grant 	 GM.setClipboard
// @require  http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js
// @require  https://raw.githubusercontent.com/blueimp/JavaScript-MD5/master/js/md5.min.js
// ==/UserScript==


console.log("Start blackjack");
let $ = window.jQuery;

//GM.getValue('listGlobals').then(value => {

    // Init

Array.prototype.max = function() {
  return Math.max.apply(null, this);
};

Array.prototype.min = function() {
  return Math.min.apply(null, this);
};

    let btnHit = $("input[name='hit']");
    let btnStand = $("input[name='stand']");
    let btnDeal = $("input[name='deal']");

    let divP = $("form > div *");
    // console.log(divP);

    let regexImgCard = new RegExp(/.*\/([\d]+[a-z]+).*/);
    let regexPoints = new RegExp(/.*Points: ([\d]*)/);
    let regexPossiblesPoints = new RegExp(/.*oints:? ([\d]*), ([\d]*)/);
    let regexCredits = new RegExp(/.*CREDITS: ([\d]*)*/);

    let dealer = true;
    let listCardDealer = [];
    let listCardPlayer = [];
    let listPointsDealer = [];
    let listPointsPlayer = [];
    let credits = 0;

    divP.each(function( index ) {
        let tagName = $(this).prop("tagName");
        // console.log( index + ": " + tagName);

        if (tagName == "DIV" && $(this).text() == "PLAYER") {
            dealer = false;
        }

        if (tagName == "IMG") {
            try {
                let card = regexImgCard.exec($(this).attr("src"))[1];
                //console.log( index + ": " + card);
                dealer ? listCardDealer.push(card) : listCardPlayer.push(card) ;
            } catch (e) {
            }
        }

        if (tagName == "P") {
            try {
                let points1 = regexPossiblesPoints.exec($(this).text())[1];
                let points2 = regexPossiblesPoints.exec($(this).text())[2];
                //console.log( index + ": " + points);
                console.log( index + ": " + points1);
                console.log( index + ": " + points2);
                if (dealer) {
                    listPointsDealer.push(points1);
                    listPointsDealer.push(points2);
                } else {
                    listPointsPlayer.push(points1);
                    listPointsPlayer.push(points2);
                }
            } catch (e) {
            }
        }

        if (tagName == "P") {
            try {
                let points = regexPoints.exec($(this).text())[1];
                //console.log("Points:"+  index + ": " + points);
                dealer ? listPointsDealer.push(points) : listPointsPlayer.push(points);
                //console.log("listPointsDealer2: "+listPointsDealer);
            } catch (e) {
                console.log(e);
            }
        }

        if (tagName == "DIV") {
            try {
                credits = regexCredits.exec($(this).text())[1];
                //console.log( index + ": " + credits);
            } catch (e) {
            }
        }

    });

    console.log("listPointsDealer3: "+listPointsDealer);
    console.log("listPointsPlayer4: "+listPointsPlayer);

    /*
    listPointsDealer.forEach(function(item, index, array) {
        console.log("listPointsDealer: "+index +"="+ item);
    });

    listPointsPlayer.forEach(function(item, index, array) {
        console.log("listPointsPlayer: "+index +"="+ item);
    });
    */

    //console.log("pointDealer=" + pointDealer);
    //console.log("pointPlayer=" + pointPlayer);
    console.log("credits=" + credits);
    console.log("listCardDealer: "+listCardDealer);
    console.log("listCardPlayer: "+listCardPlayer);

    /*
    listCardDealer.forEach(function(item, index, array) {
        console.log("listCardDealer: "+index +"="+ item);
    });

    listCardPlayer.forEach(function(item, index, array) {
        console.log("listCardPlayer: "+index +"="+ item);
    });
    */


    // -----------------------------------
    // Calcul points
    // -----------------------------------
    //listPointsDealer = calculerPoints(listCardDealer);
    //listPointsPlayer = calculerPoints(listCardPlayer);



    //pointDealer = parseInt(pointDealer,10);
    //pointPlayer = parseInt(pointPlayer,10);

    //GM.deleteValue("description");

    // ---------------------------
    // Création liste globals
    // ---------------------------

    /*
    let listGlobals = [];
    // Récupération de la liste globals
    console.log("value="+value);
    if (value != undefined) {
        let objJson = JSON.parse(value);
        for (var prop in objJson) {
            //console.log("prop: "+prop);
            //console.log("objJson[prop]: "+objJson[prop]);
            //if (isCardNotExist(objJson[prop], listGlobals)) {
                listGlobals.push(objJson[prop]);
            //}
        }
        listGlobals.forEach(function(item, index, array) {
            //console.log("listGlobals: "+index +"="+ item);
        });
    }

    // Ajout des cartes des joueurs
    listCardDealer.forEach(function(item, index, array) {
        //if (isCardNotExist(item, array)) {
            listGlobals.push(item);
        //}
    });
    listCardPlayer.forEach(function(item, index, array) {
        //if (isCardNotExist(item, array)) {
            listGlobals.push(item);
        //}
    });

    console.log("nbrCarte="+listGlobals.length);
    console.log("listGlobals="+listGlobals);

    let listGlobals = [];
    listGlobals.concat(listCardPlayer);
    listGlobals.concat(value);

    GM.setValue('listGlobals', JSON.stringify(listGlobals)).then(() => {
            console.log('listGlobals saved');
    });

    // GM.deleteValue("listGlobals");
    */

    // -------------------------------------------
    // Jeu
    // -------------------------------------------

    let maxDealer = listPointsDealer.max();
    let maxPlayer = listPointsPlayer.max();
    console.log("maxDealer=" + maxDealer);
    console.log("maxPlayer=" + maxPlayer);
    //console.log("btnDeal = " + btnDeal.prop("disabled"));
    if (!btnDeal.prop("disabled")) {
        console.log("deal");
        btnDeal.click();
    } else {
        if (maxPlayer < 16 || maxDealer > maxPlayer ) {
            console.log("hit");
            btnHit.click();
        } else {
            console.log("stand");
            btnStand.click();
        }
    }

//});


// ------------------------------------------
// ------------------------------------------

function calculerPoints(listCards) {
    let regexCardCode = new RegExp(/([\d]*).*/);
    listCards.forEach(function(item, index, array) {
        let code = regexCardCode.exec(item)[1];
        //if(code == 1)
    });
}


function isCardNotExist(card, listCards) {
    return !isCardExist(card, listCards);
}

function isCardExist(card, listCards) {
    listCards.forEach(function(item, index, array) {
        if (card == item) return true;
    });
    return false;
}








